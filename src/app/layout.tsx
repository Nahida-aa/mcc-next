import type { Metadata } from "next";
// import { Geist, Geist_Mono } from "next/font/google";
import "@/style/globals.css";
import { ThemeProvider } from '@/components/providers/theme-provider';
import { Toaster } from "@/components/ui/sonner"
import { SocketProvider } from "@/components/providers/socket-provider";
import { AuthSessionProvider } from "@/components/providers/auth-provider";
// import { serverAuth } from "./(auth)/auth";
import { ProgressBar } from "@/components/layout/header/ProgressBar";
import { UIProviders } from "@/components/providers/HeroUIProvider";
import { DebugPanel } from "@/components/common/debug-panel";
import { StyleContextProvider } from "@/components/context/styleContext";
import { ModalProvider } from "@/components/providers/modal-provider";
import { AppLayout } from "@/components/layout/AppLayout";
import { auth } from "@/lib/auth";
import { headers } from 'next/headers'
import { serverAuth } from "./(auth)/auth";
import { ListIsExpandContextProvider } from "./(main)/@project/[type]/_comp/ListWithSearchContext";
import { TooltipProvider } from "@/components/ui/tooltip";

// const geistSans = Geist({
//   variable: "--font-geist-sans",
//   subsets: ["latin"],
// });

// const geistMono = Geist_Mono({
//   variable: "--font-geist-mono",
//   subsets: ["latin"],
// });

export const metadata: Metadata = {
  title: {
    default: 'mcc',
    template: '%s | mcc',
  },
  description: "Generated by create next app",
};

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const session = await serverAuth();
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
        <link
          rel="icon"
          href="/world.png"
          type="image/png"
          sizes="1024x1024"
        />
      </head>
      <body
        className={` antialiased`}
      >
        <ThemeProvider
          attribute="class"
          defaultTheme="dark"
          // defaultTheme="light"
          enableSystem={false}
          // enableSystem
          disableTransitionOnChange
        >
          <StyleContextProvider>
            <ListIsExpandContextProvider>
              <UIProviders>
                <TooltipProvider>
                  <AuthSessionProvider session={session}>
                    <AppLayout>
                        <SocketProvider>
                          <ProgressBar />
                          {children}
                        </SocketProvider>
                    </AppLayout>
                  </AuthSessionProvider>
                </TooltipProvider>
              </UIProviders>
              <DebugPanel />
            </ListIsExpandContextProvider>
          </StyleContextProvider>
          <Toaster position="top-right" richColors   />
        </ThemeProvider>
      </body>
    </html>
  );
}
